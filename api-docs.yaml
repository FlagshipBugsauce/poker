openapi: 3.0.1
info:
  title: Poker Backend
  description: Documentation for online, multi-player, poker application.
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearer: []
tags:
- name: users
  description: Users API handles all user account related requests, such as authentication,
    registration, etc...
- name: hand
  description: Hand API handles all game requests after the game has started.
- name: game
  description: Games API handles all game requests, like creating a game, joining
    a game, etc...
paths:
  /game/refresh-game-doc:
    get:
      tags:
      - game
      summary: Request Game Document Update
      description: Request an updated game document.
      operationId: getGameDocumentUpdate
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/destroy-join-game-emitter:
    post:
      tags:
      - game
      summary: Destroy Join Game Emitter
      description: Destroy the emitter that is sending updated game lists.
      operationId: destroyJoinGameEmitter
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/refresh-lobby-doc:
    get:
      tags:
      - game
      summary: Request Lobby Document Update
      description: Request an updated lobby document.
      operationId: getLobbyDocumentUpdate
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/get-list:
    get:
      tags:
      - game
      summary: Get game list
      description: Retrieves a list of games which are not full and have not yet started.
      operationId: getGameList
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Getting game active list was successful. A GetGameModel should
            be returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetGameModel'
  /game/create:
    post:
      tags:
      - game
      summary: Create a new game
      description: Creates a new game and returns the UUID to the client.
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameModel'
        required: true
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Creation of game was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/start:
    post:
      tags:
      - game
      summary: Start Game
      description: Starts the game, provided all preconditions are satisfied..
      operationId: startGame
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Game started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/refresh-hand:
    post:
      tags:
      - game
      summary: Refresh Hand
      description: Requests updated hand data.
      operationId: refreshHand
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/destroy-hand-emitter:
    post:
      tags:
      - game
      summary: Destroy Hand Emitter
      description: Destroy the emitter that is sending hand information.
      operationId: destroyHandEmitter
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/get-game-document:
    post:
      tags:
      - game
      operationId: getGameDocument
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameDocument'
  /game/refresh-game-list:
    post:
      tags:
      - game
      summary: Refresh Game List
      description: Requests updated list of games.
      operationId: refreshGameList
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/emitter/lobby/{jwt}:
    get:
      tags:
      - game
      summary: Request Lobby SSE Emitter
      description: Request a Lobby type SSE emitter to be sent updates regarding the
        lobby state.
      operationId: getLobbyEmitter
      parameters:
      - name: jwt
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Emitter was created successfully.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SseEmitter'
  /game/leave-lobby:
    post:
      tags:
      - game
      summary: Leave Game Lobby
      description: Request sent when a player leaves a game lobby.
      operationId: leaveLobby
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/emitter/hand/{jwt}:
    get:
      tags:
      - game
      summary: Request Hand SSE Emitter
      description: Request an SSE emitter to be sent updates to the current hand.
      operationId: getHandEmitter
      parameters:
      - name: jwt
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Emitter was created successfully.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SseEmitter'
  /game/join/{gameId}:
    post:
      tags:
      - game
      summary: Joins a game
      description: Joins the game with the provided UUID, provided such a game exists.
      operationId: joinGame
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Game was joined successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/emitter/join/{jwt}:
    get:
      tags:
      - game
      summary: Request Join Game SSE Emitter
      description: Request an SSE emitter to be sent updates to the list of games.
      operationId: getJoinGameEmitter
      parameters:
      - name: jwt
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Emitter was created successfully.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SseEmitter'
  /game/emitter/game/{jwt}:
    get:
      tags:
      - game
      summary: Request Game SSE Emitter
      description: Request a Game type SSE emitter to be sent updates regarding the
        game state.
      operationId: getGameEmitter
      parameters:
      - name: jwt
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Emitter was created successfully.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SseEmitter'
  /game/ready:
    post:
      tags:
      - game
      summary: Ready to Start
      description: Request sent when a player is ready for the game to start.
      operationId: ready
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/hand/roll:
    post:
      tags:
      - hand
      summary: Roll a random number.
      description: Generates a random number.
      operationId: roll
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Roll was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /test/test/gameDoc:
    get:
      tags:
      - test-controller
      operationId: test006
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LobbyDocument'
  /test/sse/test02/{x}/{y}:
    get:
      tags:
      - test-controller
      operationId: test004
      parameters:
      - name: x
        in: path
        required: true
        schema:
          type: string
      - name: "y"
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
  /test/test:
    post:
      tags:
      - test-controller
      operationId: test001
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /test/sse/test03/{userID}:
    get:
      tags:
      - test-controller
      operationId: test005
      parameters:
      - name: userID
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
  /test/test/something:
    get:
      tags:
      - test-controller
      operationId: test007
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HandModel'
  /test/sse/test01/{x}:
    get:
      tags:
      - test-controller
      operationId: test003
      parameters:
      - name: x
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SseEmitter'
  /test/get:
    get:
      tags:
      - test-controller
      operationId: test002
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /user/register:
    post:
      tags:
      - users
      summary: Register
      description: Create an account.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountModel'
        required: true
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Account creation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /user/getUserInfo/{userId}:
    get:
      tags:
      - users
      summary: Get User Info
      description: Retrieve user information for user with provided ID.
      operationId: getUserInfo
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
  /user/auth:
    post:
      tags:
      - users
      summary: Authenticate
      description: The client must call this endpoint in order to obtain a JWT, which
        must be passed in the header of most requests.
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestModel'
        required: true
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Authorization was successful. A JWT should be returned, which
            can be used to access secured endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseModel'
components:
  schemas:
    ApiErrorModel:
      type: object
      properties:
        errorType:
          type: string
          description: The type of the error.
          example: Bad Request
        description:
          type: string
          description: A description of the error.
          example: The credentials provided are invalid.
        timestamp:
          type: string
          description: The time the error occurred.
          format: date-time
    ApiSuccessModel:
      type: object
      properties:
        message:
          type: string
          description: Returned to indicate API call was successful
          example: Account created successfully.
    GetGameModel:
      type: object
      properties:
        id:
          type: string
          description: The ID of the game.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        name:
          type: string
          description: The name of the game.
          example: Friends Night Out Poker
        host:
          $ref: '#/components/schemas/PlayerModel'
        currentPlayers:
          type: integer
          description: The current number of players in the game
          format: int32
          example: 4
        maxPlayers:
          type: integer
          description: The maximum number of players allowed in the game
          format: int32
          example: 8
        buyIn:
          type: number
          description: The buy-in required to play.
          example: 400.0
    PlayerModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        email:
          type: string
          description: User's email address.
          example: user@domain.com
        group:
          type: string
          description: User's user group.
          example: Administrator
          enum:
          - Administrator
          - Client
          - Guest
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
        ready:
          type: boolean
          description: Specifies whether a player is ready to start the game.
          example: true
        host:
          type: boolean
          description: Specifies whether the player created the game.
          example: false
      description: The ID of the host.
      example: 0a7d95ef-94ba-47bc-b591-febb365bc543
    CreateGameModel:
      required:
      - buyIn
      - maxPlayers
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the game to be created
          example: Friends Night Out Poker
        maxPlayers:
          maximum: 10
          minimum: 2
          type: integer
          description: The maximum number of players allowed in the game
          format: int32
          example: 8
        buyIn:
          minimum: 0
          type: number
          description: Buy-in required to play in the game.
    GameDocument:
      type: object
      properties:
        id:
          type: string
          description: Game ID (same as game lobby ID).
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        state:
          type: string
          description: Game state.
          example: Lobby
          enum:
          - Lobby
          - Play
          - PostGame
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerModel'
        hands:
          type: array
          items:
            type: string
            format: uuid
    SseEmitter:
      type: object
      properties:
        timeout:
          type: integer
          format: int64
    GameActionModel:
      type: object
      properties:
        id:
          type: string
          description: ID of the action performed which identifies it.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        player:
          $ref: '#/components/schemas/PlayerModel'
        gameAction:
          type: string
          description: The action that occurred.
          example: Fold
          enum:
          - Fold
          - Check
          - Raise
          - Call
          - Bet
          - ReRaise
          - Ready
          - Join
          - Leave
          - Start
        clientMessage:
          type: string
          description: Message that will be displayed somewhere in the client when
            this action occurs. Could be null.
          example: Player 'FudgeNuts' has left the game.
    LobbyDocument:
      type: object
      properties:
        id:
          type: string
          description: Lobby's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        host:
          type: string
          description: Host's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        name:
          type: string
          description: Name of the game.
          example: All night poker with Jimmy
        maxPlayers:
          type: string
          description: Maximum number of players allowed in the game.
          example: "10"
        buyIn:
          type: number
          description: Buy-in required to play in the game.
          example: 69
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerModel'
        gameActions:
          type: array
          items:
            $ref: '#/components/schemas/GameActionModel'
    HandActionModel:
      type: object
      properties:
        id:
          type: string
          description: Hand Action ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        type:
          type: string
          description: Type of action.
          example: Roll
          enum:
          - Start
          - Roll
        player:
          $ref: '#/components/schemas/PlayerModel'
        message:
          type: string
          description: Message related to action which was performed.
          example: Player X rolled 27.
    HandModel:
      type: object
      properties:
        id:
          type: string
          description: Hand ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        gameId:
          type: string
          description: Game ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        message:
          type: string
          description: Temporary message.
          example: Player X won.
        actions:
          type: array
          items:
            $ref: '#/components/schemas/HandActionModel'
        playerToAct:
          type: string
          description: ID of the player whose turn it is.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
    NewAccountModel:
      type: object
      properties:
        email:
          type: string
          description: User's email address.
          example: email@domain.com
        password:
          type: string
          description: User's account password.
          example: password123
        firstName:
          type: string
          description: Users first name.
          example: Fred
        lastName:
          type: string
          description: Users last name.
          example: Flintstone
    UserModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        email:
          type: string
          description: User's email address.
          example: user@domain.com
        group:
          type: string
          description: User's user group.
          example: Administrator
          enum:
          - Administrator
          - Client
          - Guest
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
      description: The user's information.
    AuthRequestModel:
      type: object
      properties:
        email:
          type: string
          description: Email address associated with a user account.
          example: email@domain.com
        password:
          type: string
          description: Password to the account associated with the email provided.
          example: password123
    AuthResponseModel:
      type: object
      properties:
        jwt:
          type: string
          description: JSON Web Token that can be used to access secured endpoints.
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBkb21haW4uY29tIiwiZXhwIjoxNTg4OTAzODg5LCJpYXQiOjE1ODc2OTQyODl9.u9Uo7Al_a6vu_Rydt1zkhOYWFsIDPR5BgMxJjWRty9w
        userDetails:
          $ref: '#/components/schemas/UserModel'
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
