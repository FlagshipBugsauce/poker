openapi: 3.0.1
info:
  title: Poker Backend
  description: Documentation for online, multi-player, poker application.
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - bearer: []
tags:
  - name: users
    description: Users API handles all user account related requests, such as authentication,
      registration, etc...
  - name: emitters
    description: Handles all requests related to SSE emitters
  - name: hand
    description: Hand API handles all game requests after the game has started.
  - name: game
    description: Games API handles all game requests, like creating a game, joining
      a game, etc...
paths:
  /game/ready:
    post:
      tags:
        - game
      summary: Ready to Start
      description: Request sent when a player is ready for the game to start.
      operationId: ready
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/get-list:
    get:
      tags:
        - game
      summary: Get game list
      description: Retrieves a list of games which are not full and have not yet started.
      operationId: getGameList
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Getting game active list was successful. A GetGameModel should
            be returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetGameModel'
  /game/join/{gameId}:
    post:
      tags:
        - game
      summary: Joins a game
      description: Joins the game with the provided UUID, provided such a game exists.
      operationId: joinGame
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Game was joined successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/start:
    post:
      tags:
        - game
      summary: Start Game
      description: Starts the game, provided all preconditions are satisfied..
      operationId: startGame
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Game started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/create:
    post:
      tags:
        - game
      summary: Create a new game
      description: Creates a new game and returns the UUID to the client.
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameModel'
        required: true
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Creation of game was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/leave-lobby:
    post:
      tags:
        - game
      summary: Leave Game Lobby
      description: Request sent when a player leaves a game lobby.
      operationId: leaveLobby
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/hand/draw:
    post:
      tags:
        - hand
      summary: Draws a card.
      description: Draws a card from the top of the deck.
      operationId: draw
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Draw was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/hand/determine-winner/{handId}:
    post:
      tags:
        - hand
      summary: Determines winner of hand.
      description: Responds with the player model of the winner of a hand.
      operationId: determineWinner
      parameters:
        - name: handId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Draw was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerModel'
  /emitters/request/{type}/{jwt}:
    get:
      tags:
        - emitters
      summary: Request SSE Emitter
      description: Request an SSE emitter of the specified type.
      operationId: requestEmitter
      parameters:
        - name: jwt
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - GameList
              - Game
              - Lobby
              - Hand
              - GameData
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Emitter was created successfully.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SseEmitter'
  /emitters/update/{type}:
    post:
      tags:
        - emitters
      summary: Request Update
      description: Requests an update from the SSE emitter specified.
      operationId: requestUpdate
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - GameList
              - Game
              - Lobby
              - Hand
              - GameData
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /emitters/destroy/{type}:
    post:
      tags:
        - emitters
      summary: Destroy Emitter
      description: Destroy the emitter that is sending updated game lists.
      operationId: destroyEmitter
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - GameList
              - Game
              - Lobby
              - Hand
              - GameData
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /test/test/lobbyDoc:
    get:
      tags:
        - test-controller
      operationId: lobbyDocument
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LobbyDocument'
  /test/test/gameData:
    get:
      tags:
        - test-controller
      operationId: gameData
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DrawGameDataModel'
  /test/test/gameDoc:
    get:
      tags:
        - test-controller
      operationId: gameDocument
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameDocument'
  /test/test/emitterTypes:
    get:
      tags:
        - test-controller
      operationId: getEmitterType
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - GameList
                  - Game
                  - Lobby
                  - Hand
                  - GameData
  /test/test/handDoc:
    get:
      tags:
        - test-controller
      operationId: handDocument
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HandDocument'
  /user/register:
    post:
      tags:
        - users
      summary: Register
      description: Create an account.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountModel'
        required: true
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Account creation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /user/getUserInfo/{userId}:
    get:
      tags:
        - users
      summary: Get User Info
      description: Retrieve user information for user with provided ID.
      operationId: getUserInfo
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
  /user/auth:
    post:
      tags:
        - users
      summary: Authenticate
      description: The client must call this endpoint in order to obtain a JWT, which
        must be passed in the header of most requests.
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestModel'
        required: true
      responses:
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Authorization was successful. A JWT should be returned, which
            can be used to access secured endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseModel'
components:
  schemas:
    ApiErrorModel:
      type: object
      properties:
        errorType:
          type: string
          description: The type of the error.
          example: Bad Request
        description:
          type: string
          description: A description of the error.
          example: The credentials provided are invalid.
        timestamp:
          type: string
          description: The time the error occurred.
          format: date-time
    ApiSuccessModel:
      type: object
      properties:
        message:
          type: string
          description: Returned to indicate API call was successful
          example: Account created successfully.
    GetGameModel:
      type: object
      properties:
        id:
          type: string
          description: The ID of the game.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        name:
          type: string
          description: The name of the game.
          example: Friends Night Out Poker
        host:
          $ref: '#/components/schemas/LobbyPlayerModel'
        currentPlayers:
          type: integer
          description: The current number of players in the game
          format: int32
          example: 4
        maxPlayers:
          type: integer
          description: The maximum number of players allowed in the game
          format: int32
          example: 8
        buyIn:
          type: number
          description: The buy-in required to play.
          example: 400.0
    LobbyPlayerModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        email:
          type: string
          description: User's email address.
          example: user@domain.com
        group:
          type: string
          description: User's user group.
          example: Administrator
          enum:
            - Administrator
            - Client
            - Guest
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
        ready:
          type: boolean
          description: Specifies whether a player is ready to start the game.
          example: true
        host:
          type: boolean
          description: Specifies whether the player created the game.
          example: false
      description: The ID of the host.
      example: 0a7d95ef-94ba-47bc-b591-febb365bc543
    CreateGameModel:
      required:
        - buyIn
        - maxPlayers
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the game to be created
          example: Friends Night Out Poker
        maxPlayers:
          maximum: 10
          minimum: 2
          type: integer
          description: The maximum number of players allowed in the game
          format: int32
          example: 8
        buyIn:
          minimum: 0
          type: number
          description: Buy-in required to play in the game.
    PlayerModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        email:
          type: string
          description: User's email address.
          example: user@domain.com
        group:
          type: string
          description: User's user group.
          example: Administrator
          enum:
            - Administrator
            - Client
            - Guest
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
    SseEmitter:
      type: object
      properties:
        timeout:
          type: integer
          format: int64
    GameActionModel:
      type: object
      properties:
        id:
          type: string
          description: ID of the action performed which identifies it.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        player:
          $ref: '#/components/schemas/LobbyPlayerModel'
        gameAction:
          type: string
          description: The action that occurred.
          example: Fold
          enum:
            - Fold
            - Check
            - Raise
            - Call
            - Bet
            - ReRaise
            - Ready
            - Join
            - Leave
            - Start
        clientMessage:
          type: string
          description: Message that will be displayed somewhere in the client when
            this action occurs. Could be null.
          example: Player 'FudgeNuts' has left the game.
    LobbyDocument:
      type: object
      properties:
        id:
          type: string
          description: Lobby's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        host:
          type: string
          description: Host's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        name:
          type: string
          description: Name of the game.
          example: All night poker with Jimmy
        maxPlayers:
          type: string
          description: Maximum number of players allowed in the game.
          example: "10"
        buyIn:
          type: number
          description: Buy-in required to play in the game.
          example: 69
        players:
          type: array
          items:
            $ref: '#/components/schemas/LobbyPlayerModel'
        gameActions:
          type: array
          items:
            $ref: '#/components/schemas/GameActionModel'
    CardModel:
      type: object
      properties:
        suit:
          type: string
          description: The suit of the card.
          example: Spades
          enum:
            - Spades
            - Hearts
            - Clubs
            - Diamonds
        value:
          type: string
          description: The value of the card.
          example: Ace
          enum:
            - Ace
            - King
            - Queen
            - Jack
            - Ten
            - Nine
            - Eight
            - Seven
            - Six
            - Five
            - Four
            - Three
            - Two
      description: Card that was drawn.
    DrawGameDataModel:
      type: object
      properties:
        player:
          $ref: '#/components/schemas/GamePlayerModel'
        acting:
          type: boolean
          description: Flag that is true if this draw is next.
          example: true
        draws:
          type: array
          items:
            $ref: '#/components/schemas/DrawGameDrawModel'
    DrawGameDrawModel:
      type: object
      properties:
        card:
          $ref: '#/components/schemas/CardModel'
        winner:
          type: boolean
          description: Flag that is true if this draw won the hand.
          example: true
        acting:
          type: boolean
          description: Flag that is true if this draw is next.
          example: true
      description: Model representing data in the draw game.
    GamePlayerModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        email:
          type: string
          description: User's email address.
          example: user@domain.com
        group:
          type: string
          description: User's user group.
          example: Administrator
          enum:
            - Administrator
            - Client
            - Guest
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
        score:
          type: integer
          description: The players current score.
          format: int32
          example: 69
        active:
          type: boolean
          description: Specifies whether a player is active.
          example: true
      description: Model representing a player in a game.
    GameDocument:
      type: object
      properties:
        id:
          type: string
          description: Game ID (same as game lobby ID).
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        state:
          type: string
          description: Game state.
          example: Lobby
          enum:
            - Lobby
            - Play
            - Over
        players:
          type: array
          items:
            $ref: '#/components/schemas/GamePlayerModel'
        hands:
          type: array
          items:
            type: string
            format: uuid
        summary:
          $ref: '#/components/schemas/GameSummaryModel'
        totalHands:
          type: integer
          description: Total number of hands in the game.
          format: int32
          example: 5
        timeToAct:
          type: integer
          description: Amount of time each player has to act.
          format: int32
          example: 17
    GameSummaryModel:
      type: object
      properties:
        message:
          type: string
          description: Placeholder message.
          example: This is a message.
      description: Model representing summary of a game.
    HandActionModel:
      type: object
      properties:
        id:
          type: string
          description: Hand Action ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        type:
          type: string
          description: Type of action performed.
          enum:
            - Start
            - Roll
            - Draw
        message:
          type: string
          description: Message related to action which was performed.
          example: Player X rolled 27.
        player:
          $ref: '#/components/schemas/GamePlayerModel'
        value:
          type: integer
          description: Value that was rolled.
          format: int32
          example: 27
        drawnCard:
          $ref: '#/components/schemas/CardModel'
    HandDocument:
      type: object
      properties:
        id:
          type: string
          description: Hand ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        gameId:
          type: string
          description: Game ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        message:
          type: string
          description: Temporary message.
          example: Player X won.
        actions:
          type: array
          items:
            $ref: '#/components/schemas/HandActionModel'
        playerToAct:
          $ref: '#/components/schemas/GamePlayerModel'
    NewAccountModel:
      type: object
      properties:
        email:
          type: string
          description: User's email address.
          example: email@domain.com
        password:
          type: string
          description: User's account password.
          example: password123
        firstName:
          type: string
          description: Users first name.
          example: Fred
        lastName:
          type: string
          description: Users last name.
          example: Flintstone
    UserModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        email:
          type: string
          description: User's email address.
          example: user@domain.com
        group:
          type: string
          description: User's user group.
          example: Administrator
          enum:
            - Administrator
            - Client
            - Guest
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
      description: The user's information.
    AuthRequestModel:
      type: object
      properties:
        email:
          type: string
          description: Email address associated with a user account.
          example: email@domain.com
        password:
          type: string
          description: Password to the account associated with the email provided.
          example: password123
    AuthResponseModel:
      type: object
      properties:
        jwt:
          type: string
          description: JSON Web Token that can be used to access secured endpoints.
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBkb21haW4uY29tIiwiZXhwIjoxNTg4OTAzODg5LCJpYXQiOjE1ODc2OTQyODl9.u9Uo7Al_a6vu_Rydt1zkhOYWFsIDPR5BgMxJjWRty9w
        userDetails:
          $ref: '#/components/schemas/UserModel'
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
