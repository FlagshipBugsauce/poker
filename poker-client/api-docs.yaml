openapi: 3.0.1
info:
  title: Poker Backend
  description: Documentation for online, multi-player, poker application.
servers:
- url: http://poker-testing.ngrok.io
  variables: {}
security:
- bearer: []
tags:
- name: websocket
  description: WebSocket controller.
- name: users
  description: Users API handles all user account related requests, such as authentication,
    registration, etc...
- name: hand
  description: Hand API handles all game requests after the game has started.
- name: game
  description: Games API handles all game requests, like creating a game, joining
    a game, etc...
paths:
  /game/ready:
    post:
      tags:
      - game
      summary: Ready to Start
      description: Request sent when a player is ready for the game to start.
      operationId: ready
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/create:
    post:
      tags:
      - game
      summary: Create a new game
      description: Creates a new game and returns the UUID to the client.
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameParameterModel'
        required: true
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Creation of game was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/join/{gameId}:
    post:
      tags:
        - game
      summary: Joins a game
      description: Joins the game with the provided UUID, provided such a game exists.
      operationId: joinGame
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Game was joined successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/start:
    post:
      tags:
        - game
      summary: Start Game
      description: Starts the game, provided all preconditions are satisfied..
      operationId: startGame
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Game started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/leave-lobby:
    post:
      tags:
        - game
      summary: Leave Game Lobby
      description: Request sent when a player leaves a game lobby.
      operationId: leaveLobby
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Request handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/active:
    post:
      tags:
        - game
      summary: Set Active Status
      description: Sets the status that indicates whether a player is active or not.
      operationId: setActiveStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActiveStatusModel'
        required: true
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Creation of game was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /game/hand/draw:
    post:
      tags:
        - hand
      summary: Draws a card.
      description: Draws a card from the top of the deck.
      operationId: draw
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Draw was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /test/models:
    get:
      tags:
        - test-controller
      operationId: models
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelModel'
  /test/deal:
    get:
      tags:
        - test-controller
      operationId: dealCards
      parameters:
        - name: gameId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
  /test/send-private-message:
    get:
      tags:
        - test-controller
      operationId: sendPrivateMessage
      parameters:
        - name: message
          in: query
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: default response
  /user/register:
    post:
      tags:
        - users
      summary: Register
      description: Create an account.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountModel'
        required: true
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Account creation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessModel'
  /user/getUserInfo/{userId}:
    get:
      tags:
      - users
      summary: Get User Info
      description: Retrieve user information for user with provided ID.
      operationId: getUserInfo
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUserModel'
  /user/auth:
    post:
      tags:
        - users
      summary: Authenticate
      description: The client must call this endpoint in order to obtain a JWT, which
        must be passed in the header of most requests.
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestModel'
        required: true
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Authorization was successful. A JWT should be returned, which
            can be used to access secured endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseModel'
  /user/auth-with-jwt:
    post:
      tags:
        - users
      summary: Authenticate With JWT
      description: If the client has a JWT stored in a cookie, it can call this endpoint
        to authenticate using the JWT stored in the cookie.
      operationId: authorizeWithJwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtAuthRequestModel'
        required: true
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Authorization was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseModel'
  /private-topic:
    get:
      tags:
        - websocket
      summary: Request a private topic.
      description: Creates a private topic so that the backend can communicate securely
        to one client.
      operationId: getPrivateTopic
      responses:
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        "200":
          description: Private topic successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateTopicModel'
components:
  schemas:
    ApiErrorModel:
      type: object
      properties:
        errorType:
          type: string
          description: The type of the error.
          example: Bad Request
        description:
          type: string
          description: A description of the error.
          example: The credentials provided are invalid.
        timestamp:
          type: string
          description: The time the error occurred.
          format: date-time
    ApiSuccessModel:
      type: object
      properties:
        message:
          type: string
          description: Returned to indicate API call was successful
          example: Account created successfully.
    GameParameterModel:
      required:
        - buyIn
        - maxPlayers
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the game to be created
          example: Friends Night Out Poker
        maxPlayers:
          maximum: 10
          minimum: 2
          type: integer
          description: The maximum number of players allowed in the game
          format: int32
          example: 8
        buyIn:
          minimum: 0
          type: number
          description: Buy-in required to play in the game.
          example: 25
      description: The parameters of a game.
    ActiveStatusModel:
      required:
        - away
      type: object
      properties:
        away:
          type: boolean
          description: Flag to determine what to set the player's active status to.
          example: true
    AuthRequestModel:
      type: object
      properties:
        email:
          type: string
          description: Email address associated with a user account.
          example: email@domain.com
        password:
          type: string
          description: Password to the account associated with the email provided.
          example: password123
    AuthResponseModel:
      type: object
      properties:
        jwt:
          type: string
          description: JSON Web Token that can be used to access secured endpoints.
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBkb21haW4uY29tIiwiZXhwIjoxNTg4OTAzODg5LCJpYXQiOjE1ODc2OTQyODl9.u9Uo7Al_a6vu_Rydt1zkhOYWFsIDPR5BgMxJjWRty9w
        userDetails:
          $ref: '#/components/schemas/ClientUserModel'
    CardModel:
      type: object
      properties:
        suit:
          type: string
          description: The suit of the card.
          example: Spades
          enum:
            - Spades
            - Hearts
            - Clubs
            - Diamonds
            - Back
        value:
          type: string
          description: The value of the card.
          example: Ace
          enum:
          - Ace
          - King
          - Queen
          - Jack
          - Ten
          - Nine
          - Eight
          - Seven
          - Six
          - Five
          - Four
          - Three
          - Two
          - Back
      description: Model of a card.
    ChatMessageModel:
      type: object
      properties:
        timestamp:
          type: string
          description: Time the message was sent.
          format: date-time
        author:
          type: string
          description: Author of the message. Null if the message was sent by the
            system.
          example: Jackson McGee
        message:
          type: string
          description: Message
          example: Jackson McGee drew the Ace of Spaces.
      description: Message sent to chat.
    ClientMessageModel:
      type: object
      properties:
        jwt:
          type: string
          description: Optional field when user's identity needs to be verified in
            a secure fashion.
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBkb21haW4uY29tIiwiZXhwIjoxNTg4OTAzODg5LCJpYXQiOjE1ODc2OTQyODl9.u9Uo7Al_a6vu_Rydt1zkhOYWFsIDPR5BgMxJjWRty9w
        userId:
          type: string
          description: Optional field to identify a user when security is not important.
          format: uuid
        gameId:
          type: string
          description: Optional field to identify the game a user is in.
          format: uuid
        data:
          type: object
          description: Data being sent by the client.
      description: Generic model used to send data to the server.
    ClientUserModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        email:
          type: string
          description: User's email address.
          example: user@domain.com
        group:
          type: string
          description: User's user group.
          example: Administrator
          enum:
            - Administrator
            - Client
            - Guest
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
      description: The user's information.
    CurrentGameModel:
      type: object
      properties:
        inGame:
          type: boolean
          description: Flag that represents whether a player is currently in a game.
          example: true
        id:
          type: string
          description: ID of the game a player is in, if the player is in a game.
          format: uuid
      description: Contains information regarding the game a player is currently in.
    DealModel:
      type: object
      properties:
        id:
          type: string
          description: ID of the deal event.
          format: uuid
        numCards:
          type: integer
          description: Number of cards to deal.
          format: int32
          example: 2
      description: Deal model that is sent to the client to trigger a deal event.
    DeckModel:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/CardModel'
        usedCards:
          type: array
          items:
            $ref: '#/components/schemas/CardModel'
    DrawGameDataContainerModel:
      type: object
      properties:
        gameData:
          type: array
          items:
            $ref: '#/components/schemas/DrawGameDataModel'
      description: Container for a list of game data, plus some other useful information.
    DrawGameDataModel:
      type: object
      properties:
        player:
          $ref: '#/components/schemas/GamePlayerModel'
        acting:
          type: boolean
          description: Flag that is true if this draw is next.
          example: true
        draws:
          type: array
          items:
            $ref: '#/components/schemas/DrawGameDrawModel'
      description: Model representing player data in a game, i.e. cards drawn, etc...
    DrawGameDrawModel:
      type: object
      properties:
        card:
          $ref: '#/components/schemas/CardModel'
        winner:
          type: boolean
          description: Flag that is true if this draw won the hand.
          example: true
      description: Model representing data in the draw game.
    GameActionModel:
      type: object
      properties:
        playerId:
          type: string
          format: uuid
        actionType:
          type: string
          enum:
            - Fold
            - Check
            - AllInCheck
            - Call
            - Raise
        raise:
          type: number
    GameListModel:
      type: object
      properties:
        id:
          type: string
          description: The ID of the game.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        parameters:
          $ref: '#/components/schemas/GameParameterModel'
        host:
          $ref: '#/components/schemas/LobbyPlayerModel'
        currentPlayers:
          type: number
          description: The current number of players in the game
          example: 4
    GameModel:
      type: object
      properties:
        id:
          type: string
          description: Game ID (same as game lobby ID).
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        phase:
          type: string
          description: Game phase.
          example: Lobby
          enum:
            - Lobby
            - Play
            - Over
        players:
          type: array
          items:
            $ref: '#/components/schemas/GamePlayerModel'
        hands:
          type: array
          items:
            type: string
            format: uuid
        currentHand:
          type: integer
          description: Current hand being played.
          format: int32
          example: 5
        totalHands:
          type: integer
          description: Total number of hands in the game.
          format: int32
          example: 5
        timeToAct:
          type: integer
          description: Amount of time each player has to act.
          format: int32
          example: 17
      description: Information that defines the game state, such as phase, players,
        etc...
    GamePlayerModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
        away:
          type: boolean
          description: Specifies whether a player is active.
          example: true
        out:
          type: boolean
          description: Specifies whether a player is out of the game.
          example: false
        cards:
          type: array
          description: Cards
          items:
            $ref: '#/components/schemas/CardModel'
        controls:
          $ref: '#/components/schemas/TableControlsModel'
        folded:
          type: boolean
          description: Player is no longer in the hand when this is true.
          example: false
        allIn:
          type: boolean
          description: Player bet entire bankroll.
          example: false
      description: Model representing a player in a game.
    GenericServerMessage:
      type: object
      properties:
        type:
          type: string
          enum:
            - Debug
            - GameList
            - Lobby
            - Game
            - Hand
            - GameData
            - PlayerData
            - Toast
            - ReadyToggled
            - PlayerJoinedLobby
            - PlayerLeftLobby
            - GamePhaseChanged
            - HandStarted
            - PlayerAwayToggled
            - HandActionPerformed
            - ActingPlayerChanged
            - GamePlayer
            - CardDrawnByPlayer
            - StartTurnTimer
            - PokerTable
            - Deal
            - Timer
            - HideCards
            - Cards
        data:
          type: object
    HandSummaryModel:
      type: object
      properties:
        card:
          $ref: '#/components/schemas/CardModel'
        winner:
          type: integer
          format: int32
      description: Hand summary.
    HideCardsModel:
      type: object
      properties:
        id:
          type: string
          description: ID of the deal event.
          format: uuid
    JwtAuthRequestModel:
      type: object
      properties:
        jwt:
          type: string
          description: JWT being used to authenticate.
      description: Authorization request using a JWT.
    LobbyModel:
      type: object
      properties:
        id:
          type: string
          description: Lobby's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        host:
          $ref: '#/components/schemas/LobbyPlayerModel'
        parameters:
          $ref: '#/components/schemas/GameParameterModel'
        players:
          type: array
          items:
            $ref: '#/components/schemas/LobbyPlayerModel'
      description: Game lobby containing information such as game parameters, players,
        etc...
    LobbyPlayerModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
        ready:
          type: boolean
          description: Specifies whether a player is ready to start the game.
          example: true
        host:
          type: boolean
          description: Specifies whether the player created the game.
          example: false
    ModelModel:
      type: object
      properties:
        cardSuit:
          type: string
          enum:
            - Spades
            - Hearts
            - Clubs
            - Diamonds
            - Back
        cardValue:
          type: string
          enum:
            - Ace
            - King
            - Queen
            - Jack
            - Ten
            - Nine
            - Eight
            - Seven
            - Six
            - Five
            - Four
            - Three
            - Two
            - Back
        gameAction:
          type: string
          enum:
            - Fold
            - Check
            - AllInCheck
            - Call
            - Raise
        gamePhase:
          type: string
          enum:
            - Lobby
            - Play
            - Over
        messageType:
          type: string
          enum:
            - Debug
            - GameList
            - Lobby
            - Game
            - Hand
            - GameData
            - PlayerData
            - Toast
            - ReadyToggled
            - PlayerJoinedLobby
            - PlayerLeftLobby
            - GamePhaseChanged
            - HandStarted
            - PlayerAwayToggled
            - HandActionPerformed
            - ActingPlayerChanged
            - GamePlayer
            - CardDrawnByPlayer
            - StartTurnTimer
            - PokerTable
            - Deal
            - Timer
            - HideCards
            - Cards
        userGroup:
          type: string
          enum:
            - Administrator
            - Client
            - Guest
        activeStatusModel:
          $ref: '#/components/schemas/ActiveStatusModel'
        cardModel:
          $ref: '#/components/schemas/CardModel'
        dealModel:
          $ref: '#/components/schemas/DealModel'
        deckModel:
          $ref: '#/components/schemas/DeckModel'
        drawGameDataContainerModel:
          $ref: '#/components/schemas/DrawGameDataContainerModel'
        drawGameDrawModel:
          $ref: '#/components/schemas/DrawGameDrawModel'
        gameActionModel:
          $ref: '#/components/schemas/GameActionModel'
        gameListModel:
          $ref: '#/components/schemas/GameListModel'
        gameModel:
          $ref: '#/components/schemas/GameModel'
        gameParameterModel:
          $ref: '#/components/schemas/GameParameterModel'
        gamePlayerModel:
          $ref: '#/components/schemas/GamePlayerModel'
        handSummaryModel:
          $ref: '#/components/schemas/HandSummaryModel'
        hideCardsModel:
          $ref: '#/components/schemas/HideCardsModel'
        lobbyModel:
          $ref: '#/components/schemas/LobbyModel'
        lobbyPlayerModel:
          $ref: '#/components/schemas/LobbyPlayerModel'
        playerModel:
          $ref: '#/components/schemas/PlayerModel'
        pokerTableModel:
          $ref: '#/components/schemas/PokerTableModel'
        potModel:
          $ref: '#/components/schemas/PotModel'
        timerModel:
          $ref: '#/components/schemas/TimerModel'
        tableControlsModel:
          $ref: '#/components/schemas/TableControlsModel'
        winnerModel:
          $ref: '#/components/schemas/WinnerModel'
        userModel:
          $ref: '#/components/schemas/UserModel'
        clientUserModel:
          $ref: '#/components/schemas/ClientUserModel'
        newAccountModel:
          $ref: '#/components/schemas/NewAccountModel'
        authRequestModel:
          $ref: '#/components/schemas/AuthRequestModel'
        authResponseModel:
          $ref: '#/components/schemas/AuthResponseModel'
        jwtAuthRequestModel:
          $ref: '#/components/schemas/JwtAuthRequestModel'
        chatMessageModel:
          $ref: '#/components/schemas/ChatMessageModel'
        clientMessageModel:
          $ref: '#/components/schemas/ClientMessageModel'
        currentGameModel:
          $ref: '#/components/schemas/CurrentGameModel'
        genericServerMessage:
          $ref: '#/components/schemas/GenericServerMessage'
        privateTopicModel:
          $ref: '#/components/schemas/PrivateTopicModel'
        toastClassModel:
          $ref: '#/components/schemas/ToastClassModel'
        toastModel:
          $ref: '#/components/schemas/ToastModel'
        webSocketInfoModel:
          $ref: '#/components/schemas/WebSocketInfoModel'
        webSocketUpdateModel:
          $ref: '#/components/schemas/WebSocketUpdateModel'
        apiErrorModel:
          $ref: '#/components/schemas/ApiErrorModel'
        apiSuccessModel:
          $ref: '#/components/schemas/ApiSuccessModel'
    NewAccountModel:
      type: object
      properties:
        email:
          type: string
          description: User's email address.
          example: email@domain.com
        password:
          type: string
          description: User's account password.
          example: password123
        firstName:
          type: string
          description: Users first name.
          example: Fred
        lastName:
          type: string
          description: Users last name.
          example: Flintstone
    PlayerModel:
      type: object
      properties:
        id:
          type: string
          description: User's ID.
          format: uuid
          example: 0a7d95ef-94ba-47bc-b591-febb365bc543
        firstName:
          type: string
          description: User's first name.
          example: Fred
        lastName:
          type: string
          description: User's last name.
          example: Flintstone
      description: Player of a game.
    PokerTableModel:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/GamePlayerModel'
        actingPlayer:
          type: integer
          description: Position of the player who is acting.
          format: int32
          example: 3
        playerThatActed:
          type: integer
          description: Position of the player that acted.
          format: int32
          example: 3
        dealer:
          type: integer
          description: Position of the dealer.
          format: int32
          example: 3
        displayHandSummary:
          type: boolean
          description: Flag to determine whether the summary of winning hand should
            be displayed.
          example: true
        summary:
          $ref: '#/components/schemas/HandSummaryModel'
        winners:
          type: array
          items:
            $ref: '#/components/schemas/WinnerModel'
        eventTracker:
          type: integer
          description: This is incremented whenever some action is performed.
          format: int32
          example: 69
        minRaise:
          type: number
          description: Minimum raise amount.
          example: 69
        pot:
          type: number
          description: Total amount in the pot.
          example: 420.69
        pots:
          type: array
          items:
            $ref: '#/components/schemas/PotModel'
        blind:
          type: number
          description: Blinds.
          example: 69
        round:
          type: integer
          description: Current round.
          format: int32
          example: 69
        lastToAct:
          type: integer
          description: The round will end once this player has acted.
          format: int32
          example: 2
        betting:
          type: boolean
          description: Flag that is true when a betting round is taking place.
          example: true
    PotModel:
      type: object
      properties:
        wager:
          type: number
          description: The maximum wager in this side-pot.
        total:
          type: number
          description: The total amount in this side-pot.
      description: Side-pot of a poker game.
    PrivateTopicModel:
      type: object
      properties:
        id:
          type: string
          description: Secure topic ID.
          format: uuid
      description: Specifies the ID of a topic used to communicate securely with one
        user.
    TableControlsModel:
      type: object
      properties:
        bankRoll:
          type: number
          description: Size of the players bank roll.
        currentBet:
          type: number
          description: Amount invested into current round of betting.
        toCall:
          type: number
          description: Amount required for the player to call.
      description: Model containing fields needed by the UI's game controls component.
    TimerModel:
      type: object
      properties:
        id:
          type: string
          description: ID of the timer.
          format: uuid
        duration:
          type: number
          description: Duration of the timer
          example: 7
    ToastClassModel:
      type: object
      properties:
        classname:
          type: string
          description: Class name string used by HTML elements.
          example: toast-md
        delay:
          type: integer
          description: The duration the toast will be displayed for, in ms.
          format: int32
          example: 5000
      description: Model containing fields necessary to configure the appearance of
        a toast.
    ToastModel:
      type: object
      properties:
        message:
          type: string
          description: The message to display.
          example: Login Successful!
        options:
          $ref: '#/components/schemas/ToastClassModel'
      description: Contains the message to display and the duration of the toast.
    UserModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        password:
          type: string
        group:
          type: string
          enum:
            - Administrator
            - Client
            - Guest
        firstName:
          type: string
        lastName:
          type: string
    WebSocketInfoModel:
      type: object
      properties:
        secureTopicId:
          type: string
          format: uuid
        lastActivity:
          type: string
          format: date-time
    WebSocketUpdateModel:
      type: object
      properties:
        id:
          type: string
          description: ID component of the topic.
          format: uuid
        type:
          type: string
          description: Type of message.
          enum:
            - Debug
            - GameList
            - Lobby
            - Game
            - Hand
            - GameData
            - PlayerData
            - Toast
            - ReadyToggled
            - PlayerJoinedLobby
            - PlayerLeftLobby
            - GamePhaseChanged
            - HandStarted
            - PlayerAwayToggled
            - HandActionPerformed
            - ActingPlayerChanged
            - GamePlayer
            - CardDrawnByPlayer
            - StartTurnTimer
            - PokerTable
            - Deal
            - Timer
            - HideCards
            - Cards
        topic:
          type: string
          description: Topic to broadcast to.
          example: /topic/game/xxx
      description: Contains fields needed to determine what topic to broadcast to
        and what data to broadcast.
    WinnerModel:
      type: object
      properties:
        id:
          type: string
          description: The ID of the winning player.
          format: uuid
        winnings:
          type: number
          description: The amount the player won.
        cards:
          type: array
          items:
            $ref: '#/components/schemas/CardModel'
      description: A winner of a hand, could be one of several.
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
