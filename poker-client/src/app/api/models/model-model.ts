/* tslint:disable */
import {ActiveStatusModel} from './active-status-model';
import {ApiErrorModel} from './api-error-model';
import {ApiSuccessModel} from './api-success-model';
import {AuthRequestModel} from './auth-request-model';
import {AuthResponseModel} from './auth-response-model';
import {CardModel} from './card-model';
import {ChatMessageModel} from './chat-message-model';
import {ClientMessageModel} from './client-message-model';
import {ClientUserModel} from './client-user-model';
import {CurrentGameModel} from './current-game-model';
import {DealModel} from './deal-model';
import {DeckModel} from './deck-model';
import {DrawGameDataContainerModel} from './draw-game-data-container-model';
import {DrawGameDrawModel} from './draw-game-draw-model';
import {GameActionModel} from './game-action-model';
import {GameListModel} from './game-list-model';
import {GameModel} from './game-model';
import {GameParameterModel} from './game-parameter-model';
import {GamePlayerModel} from './game-player-model';
import {GenericServerMessage} from './generic-server-message';
import {HandSummaryModel} from './hand-summary-model';
import {HideCardsModel} from './hide-cards-model';
import {JwtAuthRequestModel} from './jwt-auth-request-model';
import {LobbyModel} from './lobby-model';
import {LobbyPlayerModel} from './lobby-player-model';
import {NewAccountModel} from './new-account-model';
import {PlayerModel} from './player-model';
import {PokerTableModel} from './poker-table-model';
import {PotModel} from './pot-model';
import {PrivateTopicModel} from './private-topic-model';
import {TableControlsModel} from './table-controls-model';
import {TimerModel} from './timer-model';
import {ToastClassModel} from './toast-class-model';
import {ToastModel} from './toast-model';
import {UserModel} from './user-model';
import {WebSocketInfoModel} from './web-socket-info-model';
import {WebSocketUpdateModel} from './web-socket-update-model';
import {WinnerModel} from './winner-model';

export interface ModelModel {
  activeStatusModel?: ActiveStatusModel;
  apiErrorModel?: ApiErrorModel;
  apiSuccessModel?: ApiSuccessModel;
  authRequestModel?: AuthRequestModel;
  authResponseModel?: AuthResponseModel;
  cardModel?: CardModel;
  cardSuit?: 'Spades' | 'Hearts' | 'Clubs' | 'Diamonds' | 'Back';
  cardValue?: 'Ace' | 'King' | 'Queen' | 'Jack' | 'Ten' | 'Nine' | 'Eight' | 'Seven' | 'Six' | 'Five' | 'Four' | 'Three' | 'Two' | 'Back';
  chatMessageModel?: ChatMessageModel;
  clientMessageModel?: ClientMessageModel;
  clientUserModel?: ClientUserModel;
  currentGameModel?: CurrentGameModel;
  dealModel?: DealModel;
  deckModel?: DeckModel;
  drawGameDataContainerModel?: DrawGameDataContainerModel;
  drawGameDrawModel?: DrawGameDrawModel;
  gameAction?: 'Fold' | 'Check' | 'AllInCheck' | 'Call' | 'Raise';
  gameActionModel?: GameActionModel;
  gameListModel?: GameListModel;
  gameModel?: GameModel;
  gameParameterModel?: GameParameterModel;
  gamePhase?: 'Lobby' | 'Play' | 'Over';
  gamePlayerModel?: GamePlayerModel;
  genericServerMessage?: GenericServerMessage;
  handSummaryModel?: HandSummaryModel;
  hideCardsModel?: HideCardsModel;
  jwtAuthRequestModel?: JwtAuthRequestModel;
  lobbyModel?: LobbyModel;
  lobbyPlayerModel?: LobbyPlayerModel;
  messageType?: 'Debug' | 'GameList' | 'Lobby' | 'Game' | 'Hand' | 'GameData' | 'PlayerData' | 'Toast' | 'ReadyToggled' | 'PlayerJoinedLobby' | 'PlayerLeftLobby' | 'GamePhaseChanged' | 'HandStarted' | 'PlayerAwayToggled' | 'HandActionPerformed' | 'ActingPlayerChanged' | 'GamePlayer' | 'CardDrawnByPlayer' | 'StartTurnTimer' | 'PokerTable' | 'Deal' | 'Timer' | 'HideCards' | 'Cards';
  newAccountModel?: NewAccountModel;
  playerModel?: PlayerModel;
  pokerTableModel?: PokerTableModel;
  potModel?: PotModel;
  privateTopicModel?: PrivateTopicModel;
  tableControlsModel?: TableControlsModel;
  timerModel?: TimerModel;
  toastClassModel?: ToastClassModel;
  toastModel?: ToastModel;
  userGroup?: 'Administrator' | 'Client' | 'Guest';
  userModel?: UserModel;
  webSocketInfoModel?: WebSocketInfoModel;
  webSocketUpdateModel?: WebSocketUpdateModel;
  winnerModel?: WinnerModel;
}
